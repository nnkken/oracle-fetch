// Code generated by mockery v2.22.1. DO NOT EDIT.

package types

import (
	db "github.com/nnkken/oracle-fetch/db"
	mock "github.com/stretchr/testify/mock"
)

// MockDataSource is an autogenerated mock type for the DataSource type
type MockDataSource struct {
	mock.Mock
}

type MockDataSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDataSource) EXPECT() *MockDataSource_Expecter {
	return &MockDataSource_Expecter{mock: &_m.Mock}
}

// Fetch provides a mock function with given fields:
func (_m *MockDataSource) Fetch() ([]db.DBEntry, error) {
	ret := _m.Called()

	var r0 []db.DBEntry
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]db.DBEntry, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []db.DBEntry); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.DBEntry)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataSource_Fetch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fetch'
type MockDataSource_Fetch_Call struct {
	*mock.Call
}

// Fetch is a helper method to define mock.On call
func (_e *MockDataSource_Expecter) Fetch() *MockDataSource_Fetch_Call {
	return &MockDataSource_Fetch_Call{Call: _e.mock.On("Fetch")}
}

func (_c *MockDataSource_Fetch_Call) Run(run func()) *MockDataSource_Fetch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDataSource_Fetch_Call) Return(_a0 []db.DBEntry, _a1 error) *MockDataSource_Fetch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataSource_Fetch_Call) RunAndReturn(run func() ([]db.DBEntry, error)) *MockDataSource_Fetch_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockDataSource interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockDataSource creates a new instance of MockDataSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockDataSource(t mockConstructorTestingTNewMockDataSource) *MockDataSource {
	mock := &MockDataSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
